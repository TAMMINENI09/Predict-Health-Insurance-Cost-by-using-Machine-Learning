# -*- coding: utf-8 -*-
"""insurance predictor (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f3rGfhnu3R4pX7QTRWlJCJ5H5Y2dEoV_

# MULTI LINEAR REGRESSION
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from ipywidgets import interact,interact_manual
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn import metrics
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

df=pd.read_csv("C:\\Users\\MAMATHA\\Downloads\\Project - 2\\Project - 2\\insurance.csv")

df.head()

df.isnull().sum().sum()

sns.histplot(df["charges"])

sns.distplot(df["charges"],color="red")

cr=df.corr()
sns.heatmap(cr,annot=True)

le_sex = LabelEncoder()
le_smoker = LabelEncoder()
le_region = LabelEncoder()

# Label encoding
df['sex_encoded'] = le_sex.fit_transform(df.sex)
df['smoker_encoded'] = le_smoker.fit_transform(df.smoker)
df['region_encoded'] = le_region.fit_transform(df.region)

# See label encoding result
df.head(5)

ohe_region = OneHotEncoder()

# One hot encoding (OHE) to array
arr_ohe_region = ohe_region.fit_transform(df.region_encoded.values.reshape(-1,1)).toarray()

# Convert array OHE to dataframe and append to existing dataframe
dfOneHot = pd.DataFrame(arr_ohe_region, columns=['region_'+str(i) for i in range(arr_ohe_region.shape[1])])
df = pd.concat([df, dfOneHot], axis=1)

# See the preprocessing result
df.head(5)

data = df.drop(['sex','smoker','region',
                               'region_encoded'], axis=1)

data.head(5)

train, test = train_test_split(data, test_size=0.2)

train_y = train.charges.values
train_x = train.drop(columns=['charges']).values
test_y = test.charges.values
test_x = test.drop(columns=['charges']).values

lr_model = LinearRegression()
lr_model.fit(train_x, train_y)

lr_predict = lr_model.predict(test_x)

print('r2_score:', metrics.r2_score(test_y, lr_predict))
print('Mean Squared Error:', metrics.mean_squared_error(test_y, lr_predict))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(test_y, lr_predict)))

p1 = max(max(lr_predict), max(test_y))
p2 = min(min(lr_predict), min(test_y))

ax1 = sns.scatterplot(test_y,lr_predict,color="r", label="Actual Value")
sns.lineplot([p1, p2], [p1, p2],label="predictive Value",ax=ax1)

print('Train Score: ',lr_model.score(train_x, train_y))
print('Test Score: ',lr_model.score(test_x, test_y))

data = {'age' : 40,
        'sex_encoded' : 1,
        'bmi' : 45.50,
        'children' : 4,
        'smoker_encoded' : 1,
        'region_3' : 1.0,
         "region_1":0.0,
         "region_2":0.0,
         "region_4":0.0}
index = [1]
df1 = pd.DataFrame(data,index)
df1

prediction_frank =lr_model.predict(df1)
print("Medical Insurance cost for Frank is : ",prediction_frank)

"""# RandomForestRegressor"""



train_y = train.charges.values
train_x = train.drop(columns=['charges']).values
test_y = test.charges.values
test_x = test.drop(columns=['charges']).values

rf_model = RandomForestRegressor()
rf_model.fit(train_x, train_y)

rf_predict = rf_model.predict(test_x)

print('r2_score:', metrics.r2_score(test_y, rf_predict))
print('Mean Squared Error:', metrics.mean_squared_error(test_y, rf_predict))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(test_y, rf_predict)))

print('Train Score: ',rf_model.score(train_x,train_y))
print('Test Score: ',rf_model.score(test_x,test_y))

p1 = max(max(rf_predict), max(test_y))
p2 = min(min(rf_predict), min(test_y))

ax1 = sns.scatterplot(test_y,rf_predict,color="r", label="Actual Value")
sns.lineplot([p1, p2], [p1, p2],label="predictive Value",ax=ax1)

data = {'age' : 30,
        'sex_encoded' : 0,
        'bmi' : 45.50,
        'children' : 2,
        'smoker_encoded' : 0,
        'region_3' : 1.0,
         "region_1":0.0,
         "region_2":0.0,
         "region_4":0.0}
index = [1]
df1 = pd.DataFrame(data,index)
df1

prediction_frank = rf_model.predict(df1)
print("Medical Insurance cost for Frank is : ",prediction_frank)

"""# MULTI LINEAR REGRESSION WITH PCA"""

train_y = train.charges.values
train_x = train.drop(columns=['charges']).values
test_y = test.charges.values
test_x = test.drop(columns=['charges']).values

sc = StandardScaler()
train_x = sc.fit_transform(train_x)
test_x = sc.transform(test_x)

pca = PCA(n_components=2)
train_x = pca.fit_transform(train_x)
test_x = pca.transform(test_x)

train_x.shape

lr_modelPCA = LinearRegression()
lr_modelPCA.fit(train_x, train_y)

lr_predictPCA = lr_modelPCA.predict(test_x)

print('Train Score: ',lr_modelPCA.score(train_x,train_y))

print('r2_score:', metrics.r2_score(test_y, lr_predictPCA))
print('Mean Squared Error:', metrics.mean_squared_error(test_y, lr_predictPCA))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(test_y, lr_predictPCA)))

p1 = max(max(lr_predictPCA), max(test_y))
p2 = min(min(lr_predictPCA), min(test_y))

ax1 = sns.scatterplot(test_y,lr_predictPCA,color="r", label="Actual Value")
sns.lineplot([p1, p2], [p1, p2],label="predictive Value",ax=ax1)

data = {'age' : 30,
        'sex_encoded' : 0}
index = [1]
df1 = pd.DataFrame(data,index)
df1

prediction_frank = lr_modelPCA.predict(df1)
print("Medical Insurance cost for Frank is : ",prediction_frank)

"""# RandomForestRegressor With PCA"""

train_x.shape

rf_modelPCA = RandomForestRegressor()
rf_modelPCA.fit(train_x, train_y)

rf_predict = rf_modelPCA.predict(test_x)

print('Train Score: ',rf_model.score(train_x,train_y))

print('r2_score:', metrics.r2_score(test_y, rf_predict))
print('Mean Squared Error:', metrics.mean_squared_error(test_y, rf_predict))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(test_y, rf_predict)))

data = {'age' : 30,
        'sex_encoded' : 0}
index = [1]
df1 = pd.DataFrame(data,index)
df1

prediction_frank = lr_modelPCA.predict(df1)
print("Medical Insurance cost for Frank is : ",prediction_frank)

p1 = max(max(rf_predict), max(test_y))
p2 = min(min(rf_predict), min(test_y))

ax1 = sns.scatterplot(test_y,rf_predict,color="r", label="Actual Value")
sns.lineplot([p1, p2], [p1, p2],label="predictive Value",ax=ax1)

